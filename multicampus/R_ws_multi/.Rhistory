# 추정 및 검정
install.packages("tidyverse")
# 추정 및 검정
install.packages("tidyverse")
library(tidyverse)
# sample() 표본
# 1000명 중 10명 표본 추출 (단순 무작위 추출)
sample(1:1000, 10)
# sample() 표본
# 1000명 중 10명 표본 추출 (단순 무작위 추출)
sample(1:1000, 10)
# 20명의 회원이 (주)한시경 사이트 접속하려고 할 때,
# 평균(m)이 42초, 표준오차(sxbar=sd/sqrt(n))라 가정
# 1. 접속자 평균 45초 이하일 확률
m <- 42
sxbar <- 33.57472/sqrt(20)
ggplot(data.frame(xis=c(m-4*sxbar, m+4*sxbar)),
aes(x=xis))+stat_function(fun=dnorm, args = list(mean=m, sd=sxbar),
colour="red", size=1)+
ggtitle("정규분포 그래프")
p1<- pnorm(45, mean=m, sd=sxbar, lower.tail = T)
p1
# 2. 접속자 평균 35초 이상, 45초 이하일 확률
p2<- pnorm(35, mean=m, sd=sxbar, lower.tail = T)
p3<- p1-p2
p1
# 2. 접속자 평균 35초 이상, 45초 이하일 확률
p2<- pnorm(35, mean=m, sd=sxbar, lower.tail = T)
p3<- p1-p2
p3
# 3. 접속자 평균 45초 이상일 확률
p4<- pnorm(45, mean=m, sd=sxbar, lower.tail = F)
p4
p=0.6 # 표본비율 0.6
sd = sqrt(0.6*0.4/1000)
ggplot(data.frame(xis=c(p-4*sd, p+4*sd)), aes(x=xis))+
stat_function(fun=dnorm, args=list(mean=p, sd=sd),
colour="red", size=1)+
ggtitle("Graph of sample poplulation")
qnorm(0.025, mean=0, sd=1, lower.tail = F)
qnorm(0.005, mean=0, sd=1, lower.tail = F)
# 모평균에 대한 95% 신뢰구간
# 95% 신뢰구간: x의 평균+- 오차한계
# x_bar +- t_0.025(n-1)*(sd/sqrt(n))
qt(0.025, 29, lower.tail = F)
# 2.04523 (t_0.025(n-1))
30/sqrt(30)
x_bar = 120 #표본평균
t_range=qt(0.025, 29, lower.tail = F)
error=30/sqrt(30)
error_range=(t_range*error)
error_range
confidence_range_0.95_min= x_bar - error_range
confidence_range_0.95_max= x_bar + error_range
confidence_range_0.95_min
confidence_range_0.95_max
# 1. 가설설정 h(0) = mean <=22, h(a)= mean > 22
# 2. 유의수준 결정 alpha = 0.05 (95% 신뢰수준)
# 3. 검정통계량 z= (x_bar - mean) / (sd/sqrt(n))
# 4. p-value 값 계산
# z= (22.5-22) / (2/sqrt(64)) = 2
pnorm(2, mean=0, sd=1, lower.tail=F)
# 자료구조 확인
str(cars)
# 자료구조 확인
str(cars)
cars$speed
cars$dist
plot(cars$speed, cars$dist, main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)", pch=1, col="red")
plot(cars$speed, cars$dist, main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)", pch=2, col="blue")
Nile
str(Nile)
plot(Nile, main="Nile강의 연도별 유량 변화", xlab="연도", ylab="유량")
plot(Nile, type="p", main="Nile강의 연도별 유량 변화", xlab="연도", ylab="유량")
plot(Nile, type="l", main="Nile강의 연도별 유량 변화", xlab="연도", ylab="유량")
plot(cars$speed, cars$dist, main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)", pch=1, col="red")
plot(cars$speed, cars$dist, main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)", pch=2, col="blue")
plot(cars$speed, cars$dist, main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)", pch=3, col="blue")
plot(cars$speed, cars$dist, main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)", pch=4, col="blue")
plot(cars$speed, cars$dist, main="속도와 제동거리", xlab="속도(mph)", ylab="제동거리(ft)", pch=2, col="blue")
Nile
str(Nile)
plot(Nile, main="Nile강의 연도별 유량 변화", xlab="연도", ylab="유량")
plot(Nile, type="p", main="Nile강의 연도별 유량 변화", xlab="연도", ylab="유량")
plot(Nile, type="l", main="Nile강의 연도별 유량 변화", xlab="연도", ylab="유량")
count <- c(4567,1234, 2345, 3456)
names(count) <- c("drwill","hacker","dangi","multi")
count
barplot(count, col="red", border = "black", main="교육서비스 수강생수",
xlab="교육서비스제공자", ylab="수강생수")
sum <- sum(count)
sum(count)
sum
count_relative <- count/sum
count_relative
barplot(count_relative, col="blue", border = "black",
main="교육서비스 수강생 비율",
xlab="교육서비스제공자", ylab="수강생수")
# 파이차트(Pie Chart)
pie(count_relative, radius=1, col="yellow", border="black",
main="교육서비스 수강생 비율 파이차트")
# barplot 이산형 데이터에 사용
dev.off()
x <- c(1,2,3,4,5)
y <- c(6,7,8,9,10)
x <- c(1,2,3,4,5)
y <- c(6,7,8,9,10)
barplot(x)
barplot(x,horiz = T)
# Read data
brain<-read.csv(file="brain.csv")
# Read data
brain<-read.csv(file="./brain.csv")
# Read data
brain<-read.csv(file="./5. stats_code/brain.csv")
head(brain)
dim(brain)
str(brain)
attach(brain)
# 1-1. histogram with no options
hist(brain$wt)
head(brain)
dim(brain)
str(brain)
attach(brain)
# 1-1. histogram with no options
hist(brain$wt)
# barplot 이산형 데이터에 사용
dev.off()
# 1-1. histogram with no options
hist(brain$wt)
hist(wt)
# 1-1. histogram with no options
hist(brain$wt)
hist(wt)
help(hist)
hist(wt, col = "lightblue")
hist(wt, breaks = 100, col = "lightblue", main="Histogram of Brain weight" , xlab="brain weight")
hist(wt, breaks = 10, col = "lightblue", main="Histogram of Brain weight" , xlab="brain weight")
stem(wt, scale=1)
boxplot(wt)
# see rgb values for 657 colors, choose what you like
colors()
hist(wt, breaks = 10, col = "steelblue3", main="Histogram of Brain weight" , xlab="brain weight")
grep("violet", colors(), value=TRUE)
# 1-3. 밀도함수 그리기 fit function (find density function)
par(mfrow=c(1,1))
d <- density(brain$wt)
plot(d)
# 데이터 입력
grade <- c("A","A","B","B","C","C","D","D","E","E","A","A","B","B","C")
height <- c(154,163,157,145,149,164,165,171,178,169,172,175,181,188,165)
weight<-c(51,57,58,52,49,58,60,63,67,61,81,78,83,88,73)
score<-c(71,69,80,81,72,87,83,79,78,83,62,69,72,75,73)
grade <- as.factor(grade)
grade
class_data <- data.frame(grade,height,weight,score)
class_data
head(class_data)
str(class_data)
# 나무상자(boxplot)
boxplot(class_data)
plot(class_data)
# 상관계수
cor(class_data$height, class_data$weight, method="pearson")
cor(class_data$height, class_data$score, method="pearson")
cor(class_data$grade, class_data$score, method="pearson")
cor(class_data$score, class_data$grade, method="pearson")
cor(class_data$height, class_data$score, method="pearson")
stud<-read.csv("./5. stats_code/stud_math.csv")
head(stud)
dim(stud)
str(stud)
# descriptive statistics :
summary(stud)
# character variable to factor
stud<-read.csv("stud_math.csv", stringsAsFactors = TRUE)
# character variable to factor
stud<-read.csv("./5. stats_code/stud_math.csv", stringsAsFactors = TRUE)
# stringsAsFactors = TRUE 문자 --> 범주형 데이터
str(stud)
attach(stud)
# stringsAsFactors = TRUE 문자 --> 범주형 데이터
str(stud)
attach(stud)
# descriptive statistics : compare with the above
summary(stud)
# Numerical analytics
mean(G3)
sd(G3)
sqrt(var(G3))
# 특정변수들에 대한 요약통계량
# vars <-c("변수1","변수2", "변수3")
vars<-c("G1", "G2", "G3")
head(stud[vars])
summary(stud[vars])
# categorical data(범주형 데이터) 요약
# table(변수이름)
table(health)
health_freq<-table(health)
names(health_freq) <- c ("very bad", "bad", "average", "good",
"very good")
barplot(health_freq, col=3)
# 2*2 contingency table (분할표: 범주형 변수요약)
# table(변수1, 변수2)
table(health,studytime)
chisq.test(health,studytime)
library(rpart)
m<-rpart(Species~., data=iris)
m
plot(m, compress=T, margin=.3)
text(m, cex=1.5)
?cex
install.packages("rpart.plot")
library(rpart.plot)
prp(m, type=0, extra=2, digits=3)
prp(m, type=1, extra=2, digits=3)
prp(m, type=3, extra=2, digits=3)
prp(m, type=4, extra=2, digits=3)
rpart.pred<-predict(m, newdata=iris, type="class")
rpart.pred
head(rpart.pred)
install.packages("caret")
library(caret)
install.packages('e1071')
confusionMatrix(rpart.pred, iris$Species)
head(iris)
iris.new <- iris
iris.new$Species <- as.integer(iris.new$Species) # 범주형 자료를 정수로 변환
head(iris.new)
mod.iris <- glm(Species ~., data= iris.new) 	# 로지스틱 회귀모델 도출
summary(mod.iris) 			# 회귀모델의 상세 내용 확인
# 예측 대상 데이터 생성(데이터프레임)
unknown <- data.frame(rbind(c(5.1, 3.5, 1.4, 0.2)))
names(unknown) <- names(iris)[1:4]
unknown 				# 예측 대상 데이터
pred <- predict(mod.iris, unknown) 		# 품종 예측, mod.iris 로지스틱회귀모델
pred 					# 예측 결과 출력
round(pred,0) 		# 예측 결과 출력(소수 첫째 자리에서 반올림)
# 실제 품종명 알아보기
pred <- round(pred,0)
pred
levels(iris$Species)
levels(iris$Species)[pred]
test <- iris[,1:4] 			# 예측 대상 데이터 준비
head(test)
pred <- predict(mod.iris, test) 	# 모델을 이용한 예측
pred <- round(pred,0)
pred 				# 예측 결과 출력
answer <- as.integer(iris$Species) 	# 실제 품종 정보
pred == answer 		# 예측 품종과 실제 품종이 같은지 비교
acc <- mean(pred == answer) 	# 예측 정확도 계산
acc
