2**10
2^10
2**10
print(a)
a = 10
print(a)
a <- c(1, 10)
a
a/3
a <- c(1:10)
a/3
a
a%/%3 # 몫
a%%3 # 나머지
paste("a", as.character(10.1), "cc", sep="+")
paste("a", as.character(10.1), "cc", sep="")
paste("a", as.character(10.1), "cc", sep=" ")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot")
install.packages("tidyverse")
install.packages("tidyverse")
2^10
2**10
a = 10
print(a)
a <- c(1, 10)
a
a <- c(1:10)
a
a/3
a%/%3 # 몫
a%%3 # 나머지
paste("a", as.character(10.1), "cc", sep="+")
paste("a", as.character(10.1), "cc", sep="+")
## 데이터 불러오기
data = read.csv("상관 분석 예제.csv", header=T)
head(data)
## 데이터 불러오기
data = read.csv("상관 분석 예제.csv", header=T)
setwd("C:/Users/ppos7/OneDrive/바탕 화면/인프런_ADsP/4. 확률과 통계_code")
## 데이터 불러오기
data = read.csv("상관 분석 예제.csv", header=T)
head(data)
pairs(data)
install.packages("psych")
library(psych)
install.packages("psych")
library(psych)
install.packages("psych")
cor(data, method="spearman")
## 데이터 불러오기
data = read.csv("상관 분석 예제.csv", header=T)
head(data)
pairs(data)
cor(data, method="spearman")
set.seed(1234)
x1<-runif(10, 0, 11)
x1
x2<-runif(10,11,20)
x2
x3<-runif(10, 1, 30)
x3
?runif
y<-3+0.1*x1+2*x2-3*rnorm(10,0,0.1)
df<-data.frame(y, x1, x2, x3)
df
m<-lm(y~x1+x2+x3, data=df)
m
summary(m)
# 1. 데이터 입력
x1 <- c(0.133,0.125,0.143,0.259,0.158,0.167,0.262,0.238,0.229)
x2 <- c(0.017,0.031,0.031,0.039,0.027,0.028,0.056,0.018,0.016)
x3 <- c(0.051,0.063,0.071,0.081,0.089,0.078,0.091,0.077,0.075)
# 2. 각 수준별 평균 구하기
x1.mean <- mean(x1)
x2.mean <- mean(x2)
x3.mean <- mean(x3)
# 3. 처리 내 제곱합 구하기
sse.1 <- sum( (x1-x1.mean)^2)
sse.2 <- sum( (x2-x2.mean)^2)
sse.3 <- sum( (x3-x3.mean)^2)
sse <- sse.1+sse.2+sse.3
sse
# 4. 처리 내 제곱합의 자유도
dfe <- (length(x1)-1) + (length(x2)-1) + (length(x3)-1)
dfe
# 5. 처리 간 제곱합 구하기
x.mean <- (x1.mean + x2.mean + x3.mean )/3  #총평균
sst.1 <- length(x1)*sum((x1.mean-x.mean)^2) # n1*(x1.mean-x.mean)^2
sst.2 <- length(x2)*sum((x2.mean-x.mean)^2) # n2*(x2.mean-x.mean)^2
sst.3 <- length(x3)*sum((x3.mean-x.mean)^2) # n3*(x3.mean-x.mean)^2
sst <- sst.1 + sst.2 + sst.3
sst
dft <- (3-1)
dft
f <- (sst/dft)/(sse/dfe)
f
# 8. 검정통계량 유의확률 구하기
p.value <- 1 - pf(f, 2, 24)
p.value
data_anova <- read.csv("systemAnova.csv")
data_anova
str(data_anova)
data_anova <- read.csv("systemAnova.csv")
data_anova
str(data_anova)
# 2. 변수 system 명목변수 생성
data_anova <- transform(data_anova, f_system=factor(system))
data_anova
sapply(data_anova, class) #변수 확인
aov(respondTime ~ f_system, data=data_anova)
aov(respondTime ~ f_system, data=data_anova)
data_aov <- aov(respondTime ~ f_system, data=data_anova)
summary(data_aov)
a <- ts(1:30, frequency=12, start=c(2017.1))
a
attributes(a)
aa <- ts(1:24, start=2010, end=2012, frequency=12)
aa
attributes(aa)
AirPassengers
plot(AirPassengers)
f <- decompose(apts)
apts <- ts(AirPassengers, frequency=12)
apts <- ts(AirPassengers, frequency=12)
f <- decompose(apts)
f
plot(f)
plot(f$figure, type="b", xaxt="n", xlab="")
monthNames <- months(ISOdate(2019, 1:12, 1))
axis(1, at=1:12, labels=monthNames, las=2)
install.packages("tseries")
install.packages("tseries")
library(tseries)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
ldeaths # 폐질환 사망자에 관한 자료(1974~1979년)
plot(ldeaths)
# decompose() 함수: 시계열 자료를 4가지 요인으로 분해 하는 함수
ldeaths.decomp<-decompose(ldeaths)
ldeaths.decomp
ldeaths.decomp$seasonal
plot(ldeaths.decomp)
ldeaths.decomp.adj<-ldeaths - ldeaths.decomp$seasonal
plot(ldeaths.decomp.adj)
# 주성분 분석(Principal Component Analysis)
data("USArrests")
str(USArrests)
nrow(USArrests)
rownames(USArrests)
apply(USArrests, 2, var)
USArrests_pca<-prcomp(USArrests, center=T, scale=T)
names(USArrests_pca)
summary(USArrests_pca)
print(USArrests_pca)
library(MASS)
data(eurodist)
str(eurodist)
eurodist
# 계량적 다차원 척도법(cmdscale()함수 사용) 수행
MDSEurodist <- cmdscale(eurodist)
MDSEurodist
plot(MDSEurodist)
text(MDSEurodist, rownames(MDSEurodist), cex=0.7, col="red")
abline(v=0, h=0, lty=1, lwd=0.5)
#비계량적 다차원 척도법 실습
install.packages("HSAUR")
library(HSAUR)
install.packages("ltm")
# set working directory
getwd()
install.packages("ltm")
plot(dpois(x=c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), lambda = 3),
type='h', main = "포아송분포, lambda = 3")
ggplot(data.frame(x=c(-4,4)),aes(x=x))+
stat_function(fun=dnorm, args=list(mean=0, sd=1),
colour="red", size=1)+
ggtitle("Graph of Standard Normal Distribution")
# 인터넷서버에 접속하여 이용하는 평균시간 2분, 표준편차 30초
# 표준화 변수 z=(X-120)/30
# 60초 미만 머물 확률을 표준화
# P(X<60)= P(z=(X-120)/30 < (60-120)/30 ) = P(z<-2)
pnorm(-2, mean=0, sd=1, lower.tail = T)
# 상위 10%에 해당하는 사용자의 표준화 값과 몇 초를 이용할까?
# 표준화 값
p<- qnorm(0.1, mean = 0, sd=1, lower.tail = F)
# 표준정규분포
install.packages("ggplot2")
library(ggplot2)
ggplot(data.frame(x=c(-4,4)),aes(x=x))+
stat_function(fun=dnorm, args=list(mean=0, sd=1),
colour="red", size=1)+
ggtitle("Graph of Standard Normal Distribution")
ppois(q=15, lambda = 20, lower.tail = TRUE)
# the same result with the ppois()
sum(dpois(x=c(0:15), lambda = 20))
# 표준정규분포
install.packages("ggplot2")
library(ggplot2)
ggplot(data.frame(x=c(-4,4)),aes(x=x))+
stat_function(fun=dnorm, args=list(mean=0, sd=1),
colour="red", size=1)+
ggtitle("Graph of Standard Normal Distribution")
# 인터넷서버에 접속하여 이용하는 평균시간 2분, 표준편차 30초
# 표준화 변수 z=(X-120)/30
# 60초 미만 머물 확률을 표준화
# P(X<60)= P(z=(X-120)/30 < (60-120)/30 ) = P(z<-2)
pnorm(-2, mean=0, sd=1, lower.tail = T)
# 상위 10%에 해당하는 사용자의 표준화 값과 몇 초를 이용할까?
# 표준화 값
p<- qnorm(0.1, mean = 0, sd=1, lower.tail = F)
p
x <- p*60+120
x
x/120
x <- p*60+120
x
x/120
# 0.02275013 <0.005 : ?͹?????(h0) ?Ⱒ, ?븳????(????????) ä??
# ��?Ǽ??? 0.05 ???Ͽ??? ?Ϸ? ???ͳ? ???? ��?ӽð? ???? 22?ð? ?̻?
# ???ͳ? ???? ?????ؾ? ??.
#
getwd()
# 0.02275013 <0.005 : ?͹?????(h0) ?Ⱒ, ?븳????(????????) ä??
# ��?Ǽ??? 0.05 ???Ͽ??? ?Ϸ? ???ͳ? ???? ��?ӽð? ???? 22?ð? ?̻?
# ???ͳ? ???? ?????ؾ? ??.
#
getwd()
# 0.02275013 <0.005 : ?͹?????(h0) ?Ⱒ, ?븳????(????????) ä??
# ��?Ǽ??? 0.05 ???Ͽ??? ?Ϸ? ???ͳ? ???? ��?ӽð? ???? 22?ð? ?̻?
# ???ͳ? ???? ?????ؾ? ??.
#
getwd()
install ggplot2
# 추정 및 검정
install.packages("tidyverse")
