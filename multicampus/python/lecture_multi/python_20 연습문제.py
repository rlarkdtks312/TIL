# -*- coding: utf-8 -*-
"""
Created on Fri Jan  7 15:14:49 2022

@author: rkdtk
"""
run my_modules

# card.csv 읽기

card = pd.read_csv('./data/card.csv', encoding='cp949')

# NUM을 인덱스로 사용
card = card.set_index('NUM')

# 문제) 일자별 총 지출 금액을 구해서(행끼리 더해라 axis=1로), 마지막 컬럼에 추가
# 천 단위 구분기호 제거 후 숫자 컬럼 변경하시오

# axis = 0 서로다른 행끼리 세로방향
card.applymap(lambda x: float(x.replace(',',''))).sum(axis=0)


# axis = 1 서로다른 열끼리 가로방향
card = card.applymap(lambda x: int(x.replace(',','')))

# 총 지출 금액을 구하기
card['total'] = card.sum(axis=1)
card
# astype() : 문자열에는 안되고 array, series, dataframe에는 사용 안된다.

# 식료품 컬럼에만 적용

card_new = pd.read_csv('./data/card.csv', encoding='cp949')
card_new = card_new.set_index('NUM')

# dataframe의 한 컬럼은 series 타입이기에 applymap이 아닌 map 함수를 사용하여야 한다.
f2 = lambda x : int(x.replace(',',''))
card_new['식료품'] = card_new['식료품'].map(f2)

# dataframe의 한 컬럼에 str객체로 접근하여 형변환 및 타입 변환 
card_new['의복'] = card_new['의복'].str.replace(',','')
card_new['의복'] = card_new['의복'].str.replace(',','').astype('int')

card_new['책값'].replace(',','')
# 값 치환 메서드(특정 값과 정확히 일지하는 값을 변경하거나 삭제)
# ','와 완전히 일지하는 값을 변경 또는 삭제

card = pd.read_csv('./data/card.csv', encoding='cp949')
card = card.set_index('NUM')
card = card.applymap(lambda x: int(x.replace(',','')))
## 2) 일자별로 각 품목별 지출 비율을 출력하세요
# card : ,를 제거하고 int 타입의 데이터를 가지고 있는 DF
card.iloc[0,:]
card.iloc[0,:].sum()
card.iloc[0,:] / card.iloc[0,:].sum() * 100

# apply 사용
f3 = lambda x : (x / x.sum())*100
card.apply(f3, axis=1)

# 이사람은 의복비 지출이 심하구나
#            식료품         의복        외식비         책값   온라인소액결제        의료비
# NUM                                                                 
# 1     8.629893  63.612100   3.825623  12.900356  2.491103   8.540925
# 2    11.568525  62.741011   3.647733  13.548723  1.719646   6.774362
# 3    14.757049  53.089382   4.499100  13.197361  4.499100   9.958008
# 4     8.421450  47.129909   2.907855  29.456193  1.472810  10.611782
# 5    14.228188  58.210291   3.758389  11.185682  3.445190   9.172260
# 6    18.752726  51.548190   2.747492  10.902747  1.875273  14.173572
# 7    11.750600  58.992806   4.276579   9.592326  4.796163  10.591527
# 8    12.096106  67.067109   3.106877  13.670257  2.609776   1.449876
# 9    13.131769  60.875451   2.075812  12.184116  3.294224   8.438628
# 10   10.380623  58.866782   3.503460  13.840830  2.854671  10.553633
# 11   12.819421  59.454855   3.194208   9.795571  3.109029  11.626917
# 12    6.338028  66.431925   3.661972  11.737089  1.361502  10.469484
# 13   10.568032  58.388375   2.950242  12.329370  3.082343  12.681638
# 14    9.098940  46.643110  14.134276   9.275618  2.738516  18.109541
# 15    8.956522  66.739130   2.913043  11.739130  1.347826   8.304348
# 16   13.443396  55.896226   3.867925  11.792453  2.830189  12.169811
# 17   14.947781  45.104439   4.373368  21.540470  4.503916   9.530026
# 18    8.346506  72.715776   2.782169   7.587733  2.371167   6.196649
# 19   20.578231  40.391156   7.568027  17.857143  4.166667   9.438776
# 20   14.547304  64.598169   4.984741  11.698881  1.881994   2.288911
# 21   10.976227  55.842185   3.287810  14.162873  2.832575  12.898331
# 22   10.313901  37.040359   2.451420  40.059791  1.793722   8.340807
# 23    9.156118  52.447257  17.721519   8.860759  5.485232   6.329114
# 24   14.072933  57.729841   1.951721  12.326656  2.978942  10.939908
# 25    7.398777  73.696475   1.806001   7.864841  1.660355   7.573551
# 26   12.128923  59.075488   3.011026  13.994911  2.544529   9.245123
# 27   17.146715  55.310531   2.700270  11.701170  3.060306  10.081008
# 28   12.858464  62.072155   3.977798   9.713228  3.330250   8.048104
# 29   15.944982  47.784004   3.362201  15.282731  2.750891  14.875191
# 30   10.275689  68.128655   2.882206  12.531328  2.005013   4.177109


# 형(데이터 타입) 변환 : 함수, astype 메서드
# 적용함수 : map 함수, map 메서드, apply 메서드, applymap 메서드

# 문제) 각 구매 마다 포인트 확인하고, POINT 컬럼 생성

# POINT는 주문금액 50000 미만 1%, 5만원 이상 10만원 미만 2% 10만 이상 3%
df1 = pd.read_csv("./data/ex_test1.csv", encoding = 'cp949')

if df1["주문금액"] < 50000:
    df1["주문금액"]*0.01

# ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().

result =[]

for i in df1["주문금액"]:
    if i < 500008:
        result.append(i * 0.01)
    elif i < 100000:
        result.append(i * 0.02)
    else:
        result.append(i * 0.03)
        
point = np.round(result,2)
df1['point'] = point
df1

# sql 형식으로 사용할 때
np.where(df1['주문금액']<50000,                 # 첫번째 조건
         df1['주문금액']*0.01,                  # 첫번째 조건이 참이면
         np.where(df1['주문금액']<100000,       # 두번째 조건
                  df1['주문금액']*0.02,         # 두번째 조건이 참이면
                  df1['주문금액']*0.03))        # 두번째 조건이 거짓이면

df1.groupby('회원번호')[['주문금액', 'point']].sum()


# [연습문제 - Y 값을 서로 다른 숫자로 변경]
# 출제의도 : 조건에 따른 치환

df2 = DataFrame({'Y':['a','a','b','b','c','a','a','b'],
           'x1':[1,2,4,4,6,3,5,4],
           'x2':[10,30,43,34,43,43,94,32]})

df2

# 하나 씩 사용자가 치환
df2['Y'].replace({'a':0})


# 자동 변환 함수
from sklearn.preprocessing import LabelEncoder

m_lb = LabelEncoder()
m_lb.fit_transform(df2['Y'])
# array([0, 0, 1, 1, 2, 0, 0, 1])
# [연습문제 - 조건에 따른 값의 수정]
# df2에서 x1이 5 이상일 경우, x1 평균으로 수정(최빈값, 중앙값, 최소값)

df2['x1'][df2['x1']>=5]
4    6
6    5
Name: x1, dtype: int64

df2.loc[df2['x1']>=5, 'x1']     # 추
4    6
6    5
Name: x1, dtype: int64

m1 = df2['x1'].mean()
m2 = df2['x1'].median()
m3 = df2['x1'].mode()       # 최빈값
m4 = df2['x1'].mode()[0]    # 최빈값
m5 = df2['x1'].min()
m6 = df2['x1'].max()

import statistics as stat
stat.mode(df2['x1'])        # 4 하나의 상수로 리턴해 줌

df2
df2.loc[df2['x1']>=5, 'x1']
df2.loc[df2['x1']>=5, 'x1'] = m3
df2.loc[df2['x1']>=5, 'x1'] = m4
